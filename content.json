[{"title":"JavaEE EJB的简单理解","date":"2018-06-22T05:10:05.000Z","path":"2018/06/22/JavaEE-EJB的简单理解/","text":"EJB简单理解 因为热爱，所以拼搏。 –RuiDer 什么是JavaEE JavaEE:Java Platform Enterprise EditionJavaEE是一个分层架构，分布式的体系结构。12345分层架构： JavaEE由四个层次构成，分别是客户层，Web层，业务层，持久层 客户层：页面展示层，运行在客户机上，可以访问Web层和业务层。 Web层：JSP和Servlet构成的Web页面。 业务层：处理程序的业务逻辑，主要是一些业务方法的集合。主要框架有Spring，SpringMVC，Struts，EJB框架等 持久层：数据库层，JDBC，JNDI，DataSource等，主要一流框架有Mybatis,Hibernate框架等 什么是EJB EJB:Enterprise Java Bean,一个重量级的业务层框架，重量级的意思在于其启动时开销大。 主要组成 Remote接口：定义业务逻辑方法。 Home接口： 定义获取EJB对象的方法。 Enterprise Bean类：实现Remote接口，具体方法可以包括数据库的连接，数据库的具体增删改查操作。 EJB与Spring可以比较着学习，参考源码学习。","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://yoursite.com/categories/JavaEE/"}],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://yoursite.com/tags/JavaEE/"},{"name":"EJB","slug":"EJB","permalink":"http://yoursite.com/tags/EJB/"}]},{"title":"DataSource数据源简单理解","date":"2018-06-22T03:13:37.000Z","path":"2018/06/22/DataSource数据源简单理解/","text":"DataSource数据源简单理解 因为热爱，所以拼搏。 –RuiDer 什么是数据源 JDBC2.0 提供了javax.sql.DataSource接口，它负责建立与数据库的连接，当在应用程序中访问数据库时不必编写连接数据库的代码，直接引用DataSource获取数据库的连接对象即可。用于获取操作数据Connection对象。 数据源与数据库连接池12数据源建立多个数据库连接，这些数据库连接会保存在数据库连接池中，当需要访问数据库时，只需要从数据库连接池中获取空闲的数据库连接，当程序访问数据库结束时，数据库连接会放回数据库连接池中。 数据源DataSource与JNDI1数据源DataSource是JNDI资源的一种，很简单，就是将“DataSource”字符串名称与真正的DataSource对象绑定起来，方便获取。 数据库连接池的优势123456传统的JDBC访问数据库技术，每次访问数据库都需要通过数据库驱动器Driver和数据库名称以及密码等等资源建立数据库连接。这样的连接存在两大问题：1. 频繁的建立数据库连接与断开数据库，这样会消耗大量的资源和时间，降低性能。2. 数据库的连接需要用户名和密码等等，这些需要一定的内存和CPU一定开销。","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"http://yoursite.com/categories/JavaSE/"}],"tags":[{"name":"DataSource","slug":"DataSource","permalink":"http://yoursite.com/tags/DataSource/"}]},{"title":"JNDI简单理解","date":"2018-06-22T02:55:22.000Z","path":"2018/06/22/JNDI简单理解/","text":"JNDI简单理解 因为热爱，所以拼搏。 –RuiDer 什么是JNDI技术 JNDI: Java Naming And Directory Interface,通俗的理解就是将名称与对象绑定在一起，对象工厂负责生产出对象，这些对象与特定的名称绑定。外部程序通过对象的名称查找对象资源并使用资源。 JNDI原理12345678910//javax.naming包负责管理JNDI技术，该包中的Context接口定义了两个方法//bind: 负责绑定名称和对象//lookup:通过名称查找对象的作用。public interface Conterface&#123; public void bind(String name，Object obj); publiv Object lookup(String name);&#125; 个人理解：JNDI的底层是一个HashMap结构，将名称和对象使用键值对一一对应，这种关系的搭建与Map体系紧紧相连。","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"http://yoursite.com/categories/JavaSE/"}],"tags":[{"name":"JNDI","slug":"JNDI","permalink":"http://yoursite.com/tags/JNDI/"}]},{"title":"Java事务管理","date":"2018-06-21T14:24:00.000Z","path":"2018/06/21/Java事务管理/","text":"Java事务管理 因为热爱，所以拼搏。 –RuiDer 事务12345事务是什么？ 事务一般而言是相对数据库而言的，对于数据库一次操作就属于一个事务， 一次操作可以是几句sql语句，也可以是几句JDBC的Java语句。 一次操作的成败直接影响数据库的数据以及与被修改数据有关的数据。所以， 事务相当重要。 事务原则12345数据库事务遵从ACID原则。A：原子性，automicty，一次操作对某一数据的修改在事务失败后恢复原来的数据C：一致性，一次操作失败后与被修改的数据有关的所有数据恢复原来的数据I：隔离性：一次操作进行的时候，对于其他数据，被修改的数据是不可见的。D：持久性，一次操作失败后，数据库的所有数据必须保持正确。 举例说明12345事务管理在现实生活中被常用，比如两个人在线转money，A给B转钱，其中B突然断网，那么正在交易的现金就会出现问题：A少了钱，B的钱没有增加。这时就需要事务管理来处理了！！！解决方案：加入事务管理，当事务失败后，原有数据恢复。","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"http://yoursite.com/categories/JavaSE/"}],"tags":[{"name":"JDBC","slug":"JDBC","permalink":"http://yoursite.com/tags/JDBC/"},{"name":"Java事务管理","slug":"Java事务管理","permalink":"http://yoursite.com/tags/Java事务管理/"}]},{"title":"HashTable与HashMap的瓶颈","date":"2018-06-19T09:13:17.000Z","path":"2018/06/19/HashTable与HashMap的瓶颈/","text":"HashTable与HashMap的瓶颈 因为热爱，所以拼搏。 –RuiDer HashTable与HashMap的瓶颈 我们知道，HashTable和HashMap的底层结构是数组与链表结合实现，Key的hashCode决定对象在数组中存储的位置，相同hashCode的key对象会放在同一个数组角标下。这是最理想的状况，但是存在另外一个问题，当所有的对象的hashCode相同时，所有对象都被放在一个角标中，数组缩为一个链表。这时，get方法本来时间复杂度为O（1）却变成了O(n),性能急剧下降。。","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"http://yoursite.com/categories/JavaSE/"}],"tags":[{"name":"HashTable与HashMap","slug":"HashTable与HashMap","permalink":"http://yoursite.com/tags/HashTable与HashMap/"}]},{"title":"CurrentHashMap与HashTable锁范围的区别","date":"2018-06-19T09:06:34.000Z","path":"2018/06/19/CurrentHashMap与HashTable锁范围的区别/","text":"ConcurrentHashMap和Hashtable锁的范围区别 因为热爱，所以拼搏。 –RuiDer Hashtable和ConcurrentHashMap有什么分别呢？它们都可以用于多线程的环境，但是当Hashtable的大小增加到一定的时候，性能会急剧下降，因为迭代时需要被锁定很长的时间。因为ConcurrentHashMap引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需要等到迭代完成才能访问map。简而言之，在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map。","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"http://yoursite.com/categories/JavaSE/"}],"tags":[{"name":"ConcurrentHashMap和Hashtable","slug":"ConcurrentHashMap和Hashtable","permalink":"http://yoursite.com/tags/ConcurrentHashMap和Hashtable/"},{"name":"锁","slug":"锁","permalink":"http://yoursite.com/tags/锁/"}]},{"title":"JDBC和JNDI","date":"2018-06-14T16:07:26.000Z","path":"2018/06/15/JDBC和JNDI/","text":"JNDI和JDBC 因为热爱，所以拼搏。 –RuiDer JDBCJava Database Connectivity(JDBC)JDBC以一种统一的方式来对各种各样的数据库进行 存取。和ODBC一样，JDBC为开发人员隐藏了不同数据库的不同特性。另外，由于JDBC建立在 Java的基础上,因此还提供了数据库存取的平台独立性。JDBC定义了4种不同的驱动程序： JDBC-ODBCBridge、JDBC-native driverbridge、JDBC-networkbridge、PureJavadriver。 在一个多层的企业级应用中，更大的可能是在客户端和一个EJB进行通信，采用EJB建立数据库连接。 为了实现和改进可伸缩性和系统性能， 也可以采用连接缓冲池（connection pool）优化数据库连接。 JNDIJava Naming and Directory Interface (JNDI)JNDI API被用于执行名字和目录服务。 它提供了一致的模型来存取和操作企业级的资源如DNS和LDAP，本地文件系统，后者在应用服务 器中的对象。在JNDI中，在目录结构中的每一个结点称为context。每一个JNDI名字都是相对 于context的。应用可以通过这个初始化的context经有这个目录树来定位它所需要的资源或对象。 关键JNDI相对与JDBC来说是他的灵活性,程序员不需要关心“具体的数据库后台是什么？JDBC驱动程序 是什么？JDBC URL格式是什么？访问数据库的用户名和口令是什么？”等等这些问题，程序员编写 的程序应该没有对 JDBC 驱动程序的引用，没有服务器名称，没有用户名称或口令 —— 甚至没有 数据库池或连接管理。而是把这些问题交给J2EE容器来配置和管理，程序员只需要对这些配置和管 理进行引用即可。","categories":[],"tags":[]},{"title":"Spring 详解(一)--概念解析","date":"2018-06-14T16:06:03.000Z","path":"2018/06/15/Spring-详解-一-概念解析/","text":"Spring概念解析 因为热爱，所以拼搏。 –RuiDer Spring&gt; Spring：一个分层架构（结构），一站式的Java开源框架。 分层架构概念 Spring由7个模块组成 Spring Core:核心容器，提供了Spring的基本功能，基本组件是BeanFactory,使用SpringIoc控制反转功能将配置信息与依赖规范和程序代码分开。 Spring上下文:用于配置信息的组件，包括JDBC，EJB，Email等配置信息的配置。 SpringDao：提供了一个有意义的异常结构，负责数据库方面的异常错误以及抛出程序运行时的相关异常。 Spring Web：web集成Struts，负责处理多web请求。 Spring ORM：提供JDBC，JNDI，Hibernate,orm等数据库事物对象。 Spring Aop: 通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。 Spring MVC 框架： MVC框架是一个全功能的构建 Web应用程序的 MVC 实现。通过策略接口，MVC框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。模型由javabean构成，存放于Map；视图是一个接口，负责显示模型；控制器表示逻辑代码，是Controller的实现。Spring框架的功能可以用在任何J2EE服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同J2EE 环境（Web 或EJB）、独立应用程序、测试环境之间重用。 一站式 一站式：one stop，就是说Spring是一个完美的服务体系，夸赞语句。","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}]},{"title":"EL表达式","date":"2018-06-14T03:47:31.000Z","path":"2018/06/14/EL表达式/","text":"EL表达式 因为热爱，所以拼搏。 –RuiDer EL表达式12EL:Expression Language 表达式语言，是在JSP 2.0引入的一个新特性，用于JSP文件中数据访问。它的作用相当于替代了JSP中的&lt;%= %&gt;和&lt;% %&gt;Java程序片段，使用更方便，更简单。 主要作用121.数据访问2.替代&lt;%= %&gt;和&lt;% %&gt;Java程序片段 基本语法123456789101112形如 $&#123;var&#125;例如：1.$&#123;param.username&#125;等同于 &lt;%=request.getParameter(\"username\")%&gt;都用于在页面输出请求参数username2.Java类User对象user的属性name的访问 $&#123;sessionScope.user.name&#125;或者$&#123;(sessionScope.user)[\"name\"]&#125; &lt;%=sessionContext.getparameter(\"username\").name%&gt;3.EL表达式的运算符 $&#123;2-1&#125;，$&#123;2*5&#125;，支持加减乘除取模运算符 $&#123;12&lt;=5&#125;,支持关系运算符 $&#123;!(12&gt;3)&#125;,$&#123;16&gt;3&amp;&amp;17&lt;2&#125;,支持逻辑运算符说明：EL表达式不是一门通用于开发的语言，它只是一个重要的特性，简洁了JSP数据访问。 特殊表达式 ：1234561.$&#123;empty var&#125;表示var是否为空，如果为空，输出true，否则，输出false说明： -var不存在，返回true -var存在，但是var=null，返回true -var属于集和对象（Set,Map,List），他们不包含元素时输出True2.$&#123;a&gt;b?1:2&#125;支持条件运算符 隐含对象 EL表达式定义了是一个隐含对象，他们都是java.util.Map类型，EL表达式可以通过他们Web应用中的数据。12345678910111213141.applicationScope:把Web应用范围内的属性名和属性值进行映射。2.cookie：把客户请求的cookie名和cookie对象进行映射3.header：把Http请求头部的项目名和所有匹配的项目值进行映射。比如$&#123;header.host&#125;等同于&lt;%=request.getHeader(\"host\")%&gt;4.headerValues:把请求头部的项目名和项目值的数组进行映射。5.initParam:把web中的初始化参数名和参数值进行映射。6.pageScope:把页面范围内的属性名和属性值进行映射。7.pageContext:代表javax.servlet.jsp.PageContext对象8.param:把请求参数名和参数值进行映射。9.paramValues:把请求参数名和请求参数值的数组映射。10.requestScope:请求范围内的属性名和属性值的映射。11.sessionScope:会话范围内的属性名和属性值进行映射。注意：对于含有 \"-\"字符的属性名或者参数名，必须采用\"[]\"来访问数据。比如： $&#123;user[\"user-name\"]&#125;而不是$&#123;user.user-name&#125; 重头戏 EL表达式访问的数据是特定范围内的，不是任何命名变量，比如web应用范围内的，会话范围内，page范围内等特定范围内的数据。123456比如： &lt;% String name=\"tom\"; %&gt; $&#123;name&#125;访问上面命名的name变量是错误的，如果在上面所述的特定范围内没有name属性名或者参数名，返回结果为空。 作者寄语 做过项目的都知道，EL表达式会在项目中普遍使用，尤其在前后端整合，相当便捷。这是我的博客","categories":[{"name":"JavaSE","slug":"JavaSE","permalink":"http://yoursite.com/categories/JavaSE/"}],"tags":[{"name":"EL表达式，JSP","slug":"EL表达式，JSP","permalink":"http://yoursite.com/tags/EL表达式，JSP/"}]},{"title":"Linux常用命令","date":"2018-06-13T14:37:06.000Z","path":"2018/06/13/Linux常用命令/","text":"Linux常用命令 因为热爱，所以拼搏。 –RuiDer 常用指令ls 显示文件或目录 -l 列出文件详细信息l(list) -a 列出当前目录下所有文件及目录，包括隐藏的a(all) mkdir 创建目录 -p 创建目录，若无父目录，则创建p(parent) cd 切换目录 touch 创建空文件 echo 创建带有内容的文件。 cat 查看文件内容 cp 拷贝 mv 移动或重命名 rm 删除文件 -r 递归删除，可删除子目录及文件 -f 强制删除 find 在文件系统中搜索某文件 wc 统计文本中行数、字数、字符数 grep 在文本文件中查找某个字符串 rmdir 删除空目录 tree 树形结构显示目录，需要安装tree包 pwd 显示当前目录 ln 创建链接文件 more、less 分页显示文本文件内容 head、tail 显示文件头、尾内容 ctrl+alt+F1 命令行全屏模式 系统管理命令stat 显示指定文件的详细信息，比ls更详细 who 显示在线登陆用户 whoami 显示当前操作用户 hostname 显示主机名 uname 显示系统信息 top 动态显示当前耗费资源最多进程信息 ps 显示瞬间进程状态 ps -aux du 查看目录大小 du -h /home带有单位显示目录信息 df 查看磁盘大小 df -h 带有单位显示磁盘信息 ifconfig 查看网络情况 ping 测试网络连通 netstat 显示网络状态信息 man 命令不会用了，找男人 如：man ls clear 清屏 alias 对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit kill 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。 打包压缩相关命令gzip： bzip2： tar: 打包压缩 -c 归档文件 -x 压缩文件 -z gzip压缩文件 -j bzip2压缩文件 -v 显示压缩或解压缩过程 v(view) -f 使用档名 例： tar -cvf /home/abc.tar /home/abc 只打包，不压缩 tar -zcvf /home/abc.tar.gz /home/abc 打包，并用gzip压缩 tar -jcvf /home/abc.tar.bz2 /home/abc 打包，并用bzip2压缩 当然，如果想解压缩，就直接替换上面的命令 tar -cvf / tar -zcvf / tar -jcvf 中的“c” 换成“x” 就可以了。 关机/重启机器shutdown -r 关机重启 -h 关机不重启 now 立刻关机 halt 关机 reboot 重启 Linux管道将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。 例：grep -r “close” /home/* | more 在home目录下所有文件中查找，包括close的文件，并分页输出。 Linux软件包管理dpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。 比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。 sudo dpkg -i tree_1.5.3-1_i386.deb 安装软件 sudo dpkg -r tree 卸载软件 注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等； APT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。 依然以tree为例 sudo apt-get install tree 安装tree sudo apt-get remove tree 卸载tree sudo apt-get update 更新软件 sudo apt-get upgrade 将.rpm文件转为.deb文件 .rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。 sudo alien abc.rpm vim使用vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。 命令模式下： :q 退出 :q! 强制退出 :wq 保存并退出 :set number 显示行号 :set nonumber 隐藏行号 /apache 在文档中查找apache 按n跳到下一个，shift+n上一个 yyp 复制光标所在行，并粘贴 h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→) 用户及用户组管理/etc/passwd 存储用户账号 /etc/group 存储组账号 /etc/shadow 存储用户账号的密码 /etc/gshadow 存储用户组账号的密码 useradd 用户名 userdel 用户名 adduser 用户名 groupadd 组名 groupdel 组名 passwd root 给root设置密码 su root su - root /etc/profile 系统环境变量 bash_profile 用户环境变量 .bashrc 用户环境变量 su user 切换用户，加载配置文件.bashrc su - user 切换用户，加载配置文件/etc/profile ，加载bash_profile 更改文件的用户及用户组sudo chown [-R] owner[:group] {File|Directory} 例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop 要想切换此文件所属的用户及组。可以使用命令。 sudo chown root:root jdk-7u21-linux-i586.tar.gz","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/面试/"}]},{"title":"hexo+yilia主题添加评论","date":"2018-06-11T09:15:30.000Z","path":"2018/06/11/hexo-yilia主题添加评论/","text":"hexo+yilia主题添加评论 因为热爱，所以拼搏。 –RuiDer 回顾hexo+yilia主题添加访问量 上一篇文章介绍了hexo+yilia主题添加访问量，如果需要点击hexo+yilia主题添加访问量 常见的评论系统 畅言(搜狐的评论系统,很强大,但需要有备案号) 友言(不需要备案号,功能也比较强大) 多说(功能强大，但是已经停止服务) disqus(国内经常被墙) 本文介绍畅言方式 步骤 前往 畅言官网 注册,注册成功后，按照官网提示，填好东西后，注意填写备案信息。 登录畅言后台，获取自己的appid跟appkey 修改themes\\yilia下的_config.yml,把你上述得到的appid跟appkey填写到如下位置: 123456789widgets: - popular_posts#2、网易云跟帖wangyiyun: false#3、畅言changyan_appid: '' //appid添到这里changyan_conf: '' //appkey添到这里 这样就配置结束了，之后hexo clean,hexo g,hexo d 就ok了，简单吧。。","categories":[{"name":"hexo教程","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo+yilia主题添加评论","slug":"hexo-yilia主题添加评论","permalink":"http://yoursite.com/tags/hexo-yilia主题添加评论/"},{"name":"畅言","slug":"畅言","permalink":"http://yoursite.com/tags/畅言/"}]},{"title":"hexo+yilia主题的添加访问数量","date":"2018-06-11T08:33:19.000Z","path":"2018/06/11/添加hexo-yilia主题的访问数量/","text":"hexo+yilia主题的添加访问数量 因为热爱，所以拼搏。 –RuiDer 前导必备 Github+hexo主题的个人博客 Your heart hexo添加访问量功能工具 hexo添加访问量统计功能可以用百度的站长统计、leancloud，还有不蒜子，我用的是不蒜子。 引入不蒜子 将下面代码添加在 /themes/yilia/layout/_partial/footer.ejs的末尾 1&lt;script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt; 添加站点访问量 将下面代码添加在 /themes/yilia/layout/_partial/footer.ejs中末尾。123&lt;span id=\"busuanzi_container_site_uv\"&gt; 本站访客数&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;人次&lt;/span&gt; 添加文章访问量 将下面代码添加在 /themes/yilia/layout/_partial/article.ejs 中，位置如下：1234567891011121314151617181920&lt;!-- 添加代码 --&gt;&lt;span id=\"busuanzi_container_page_pv\"&gt; 本文总阅读量&lt;span id=\"busuanzi_value_page_pv\"&gt;&lt;/span&gt;次&lt;/span&gt;&lt;!-- article.ejs自身代码--&gt;&lt;span id=\"busuanzi_container_page_pv\"&gt; 本文总阅读量&lt;span id=\"busuanzi_value_page_pv\"&gt;&lt;/span&gt;次 &lt;/span&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;div class=\"article-info article-info-index\"&gt; &lt;%if(post.top)&#123;%&gt; &lt;div class=\"article-pop-out tagcloud\"&gt; &lt;i class=\"icon-tuding\"&gt;&lt;/i&gt; &lt;a class=\"article-tag-list-link color3\"&gt;置顶&lt;/a&gt; &lt;/div&gt; 我们直接就这样放在yilia主题中，首页也会显示该网页的访问量，没法正常使用，所以我加一个判断，如果是首页不显示该文章的访问量，下面这段代码添加在/themes/yilia/layout/_partial/article.ejs的header的日期后面： 1234567891011121314&lt;!-- article自身代码 --&gt;&lt;header class=\"article-header\"&gt; &lt;%- partial('post/title', &#123;class_name: 'article-title'&#125;) %&gt; &lt;% if (!post.noDate)&#123; %&gt; &lt;%- partial('post/date', &#123;class_name: 'archive-article-date', date_format: null&#125;) %&gt; &lt;% &#125; %&gt; &lt;!-- 添加代码 --&gt; &lt;% if ( !index )&#123; %&gt; &lt;span class=\"archive-article-date\"&gt; 阅读量 &lt;span id=\"busuanzi_value_page_pv\"&gt;&lt;/span&gt; &lt;/span&gt; &lt;% &#125; %&gt; &lt;/header&gt; 作者寄语 Everything is ok..","categories":[{"name":"hexo教程","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo yilia主题添加文章访问量统计","slug":"hexo-yilia主题添加文章访问量统计","permalink":"http://yoursite.com/tags/hexo-yilia主题添加文章访问量统计/"},{"name":"不蒜子","slug":"不蒜子","permalink":"http://yoursite.com/tags/不蒜子/"}]},{"title":"第一篇博客","date":"2018-06-10T02:54:52.000Z","path":"2018/06/10/first/","text":"第一篇博客 因为热爱，所以拼搏。。 –RuiDer 2018-6-11 计划两天时间完成个人的blog，一路风雨，终于在今天下午完成博客的基本搭建。 作者寄语 如果喜欢，就坚持吧，风雨后见彩虹。不论你是小白，还是经验丰富的老司机，当然，老司机肯定不会被这些小困难难倒。但是，对于初次体验并且上手制作个人博客的你，必然会遇到很多困难，不要怕，坚持就是胜利！今日的奋斗只为明天成功打下基础，相信自己。 我所遇所解记第一次搭建个人博客 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[],"tags":[]},{"title":"C#Hashtable方法Remove","date":"2018-06-10T02:54:52.000Z","path":"2018/06/10/C#Hashtable的Remove方法/","text":"C#Hashtable方法Remove 因为热爱，所以拼搏。 –RuiDer 我的博客 学Java的，因为项目要求于是自学C#，短时间总结了很多C#与Java之间的区别。两者都是面向对象编程语言，具体区别详见其他参考。 论C#的Hashtable方法Remove方法 命名空间:System.CollectionsRemove(Object key)是根据Hashtable的键删除元素。1public void Remove(Object key) 我的引用：C#Hashtable Remove方法","categories":[{"name":"C#","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"Hashtable","slug":"Hashtable","permalink":"http://yoursite.com/tags/Hashtable/"},{"name":"Remove","slug":"Remove","permalink":"http://yoursite.com/tags/Remove/"}]}]